#
# Settings for the PI OverWatch
#  Copy the file 'default_settings.ini' to 'settings.ini' and edit
#


[general]
# General Settings
#  server_name:   used in logs and web
#  time_format:   for web, time.strftime() format
#  sensor:        look for BME280 sensor? True/False
#  screen:        look for OLED display? True/False
server_name = Pi Overwatch
time_format = %H:%M:%S, %A, %d %B, %Y
screen = False
sensor = False

[pins]
# GPIO pins to monitor and log
#  All pins are defined using BCM GPIO numbering
#  https://www.raspberrypi.org/forums/viewtopic.php?t=105200
#  Try running `gpio readall` on the Pi itself for a map
#
#  One per line: <Pin Name> = BCM pin number, eg:
# Lamp = 7
# Ventilator = 8
# Printer = 25

[button]
# The button, if enabled, controls the 1st pin defined above
#  pin:  bcm pin number of button, '0' to disable
#  url:  /<url> for web control, blank to disable
#  hold:  Minimum press time, seconds (float)
# eg:
# pin = 27
# url = lamp
pin = 0
url =
hold = 0.2

[web]
#  host: Ip address to bind server to, blank = bind to all addresses
#  port: Port number for web server
#  sensor_name: Sensor name used in web summary (eg; location)
#  pin_states: Localisation text for pin status (False,True)
host =
port = 7080
sensor_name = Room
pin_states = Off,On

[graph]
# RRD graphing options
#  durations: Default graph durations
#  wide: Total width in pixels
#  high: Total height in pixels, pin graphs are 1/2 this height
#  line: Color and style, the 'LINE2' is line width in pixels
#        eg 'LINE5' is wider
#  area: Color and gradient depth, set blank to disable
#  comment: optional notes, copyright, etc
#           (escape colons ':' with a backslash '\:')
#
# In the area and line attributes the ':data#' selector must be preserved
# See: https://oss.oetiker.ch/rrdtool/doc/rrdgraph_graph.en.html
# Graph durations are used in rrd graph as: start='end-<duration>', 'end=now'
# https://oss.oetiker.ch/rrdtool/doc/rrdfetch.en.html#TIME%20OFFSET%20SPECIFICATION
durations = 3h,1d,3d,1w,1m,3m,1y,3y
wide = 1200
high = 300
line = LINE2:data#00A0A0
area = AREA:data#D0E0E0#FFFFFF:gradheight=0
comment = Brought to you b the Pi OverWatch project: https://github.com/easytarget/pi-overwatch

[sensor]
#  interval: sensors are read on this schedule (seconds)
interval = 2

[log]
# Logging
#  interval:    Log 'heartbeat' interval (seconds, zero to disable)
#  file_dir:    Folder must be writable by the OverWatch process
#  file_name:   <name>.log
#  file_count:  Maximum number of old logfiles to retain
#  file_size:   Maximum size before logfile rolls over (Kb)
#  date_format: Log timestamp, time.strftime() format
interval = 600
file_dir = ./data
file_name = overwatch.log
file_count = 3
file_size = 1024
date_format = %d-%m-%Y %H:%M:%S

[rrd]
# RRD database
#  update_interval: seconds
#  file_dir:        Folder must be writable by overwatch process`
#  file_name:       <name>.rrd
#  cache_socket:    Unused, future expansion
update_interval = 15
file_dir = ./data
file_name = overwatch.rrd
cache_socket = rrdcache.sock

[display]
# Display orientation, contrast and burn-in prevention
#  rotate:   Is the display 'upside down'?
#            - generally the connections from the glass are at the bottom
#  contrast: This gives a limited brightness reduction (0-255)
#            - does not give full dimming to black
#  invert:   Default is light text on dark background
rotate= False
contrast = 127
invert = False

[saver]
# Screen saver / burn-in reducer
#   saver_mode: Possible values are 'off', 'blank' and 'invert'
#   saver_on:   Start time for screensaver (hour, 24hr clock)
#   saver_off:  End time
mode = off
on  = 20
off =  8

[animate]
# Display Animation
#  passtime: time between display refreshes (seconds)
#  passes:   number of refreshes of a screen before moving to next
#  speed:    rows to scroll on each animation step between screens
passtime = 2
passes = 3
speed = 16
